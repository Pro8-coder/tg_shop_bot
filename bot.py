import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums.parse_mode import ParseMode

import sqlite_db
from config import config
from core.handlers import basic, admin, cart, pay


logging.basicConfig(
    level=logging.INFO,
    force=True
)


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤/—Ä–æ—É—Ç–µ—Ä–æ–≤"""
    storage = MemoryStorage()
    bot = Bot(token=config.bot_token.get_secret_value(),
              parse_mode=ParseMode.HTML)
    dp = Dispatcher(storage=storage)

    dp.include_routers(
        basic.router,
        cart.router,
        pay.router,
        admin.router
    )

    try:
        await sqlite_db.sql_start()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        await dp.start_polling(bot)
    except asyncio.CancelledError:
        logging.info("üõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
    except RuntimeError:
        logging.critical("üí• –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –ë–î")
    except Exception as ex:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {ex}",
                      exc_info=True)
    finally:
        await bot.session.close()
        await storage.close()
        await sqlite_db.db.close()
        logging.info("üì¥ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    logging.info("üü¢ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        asyncio.run(main())
    except Exception as e:
        logging.critical(f"üí• –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {e}")
